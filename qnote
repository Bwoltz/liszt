#!/usr/bin/env python3

import sys
import json
import os.path
from os import path
import time
from datetime import datetime
import shutil


# Color Definitions
BOLD = '\033[1m'
ITALIC = '\033[3m'
RESET = '\033[0m'


# INSTALLLATION
"""
Makes an empty dot folder in the user's home directory, in which their notes will be stored.
Makes a folder inside of that folder, in which background Quick Note information will be stored.
"""
def make_background_folders():
	quicknote = path.expanduser('~/.quicknote')
	os.mkdir(quicknote)
	background = path.expanduser('~/.quicknote/.background')
	os.mkdir(background)
	notes = path.expanduser('~/.quicknote/.notes')
	os.mkdir(notes)
	archived_notes = path.expanduser('~/.quicknote/.archive_notes')
	os.mkdir(archived_notes)


"""
Makes a file to contain the name of the current note
"""
def make_background_files():
	prefix = path.expanduser('~/.quicknote/')
	data_file = prefix + '.background/data_file.json'
	default_file = prefix + '.notes/.default'
	data = {'current_note': ''}
	with open(data_file, 'w') as initial_open:
		json.dump(data, initial_open)
	write_to_data_file(data_file, default_file)
		 

"""
Makes the default note file
and the archive note file
"""
def make_defaults():
	default_note = path.expanduser('~/.quicknote/.notes/.default')
	open(default_note, 'w+')
	archive_note = path.expanduser('~/.quicknote/.notes/.archive')
	open(archive_note, 'w+')


def install():
	make_background_folders()
	make_background_files()
	make_defaults()
	print(BOLD + 'Quick Note' + RESET + ' installation successful')
	print('Current note set to \'default\'')


# HELPER METHODS
"""
Given the path to a directory, returns a list containing
the files in that directory 
"""
def read_directory(dir_name):
	files = []
	for filename in os.listdir(dir_name):
		filename = path.join(dir_name, filename)
		if path.isfile(filename):
			last_slash_index = filename.rfind('/')	
			filename = filename[last_slash_index + 2:] 
			files.append(filename)
	return files


"""
Given a filename and a row number,
confirms that the entered row is a 
valid row number. Returns the contents 
of the note as a list 
"""
def check_row(filename, row):
	if not row.isnumeric():
		print('You have entered in a faulty row number. Please choose an integer value.')
		return
	row = float(row)	
	if not row.is_integer():
		print('You have entered in a faulty row number. Please choose an integer value.')
		return
	row = int(row)
	memories = []
	with open(filename, 'r') as f:
		memories = f.readlines()
	if row <= 0 or row > len(memories):
		print('You have entered in a faulty row number. Please try again.')
		return
	return memories


"""
Given the quicknote_cache file, changes the
default file held in quicknote_cache
"""
def write_to_data_file(data_file, filename):
	data = {}
	with open(data_file, 'r') as read_from:
		data = json.load(read_from)	
	data['current_note'] = filename
	with open(data_file, 'w') as write_to:
		json.dump(data, write_to)
	

"""
Given a prompt, captures the user's
answer as either 'y' or 'n'
"""
def request_user_permission(prompt):
	decision = input(prompt)
	while (decision != 'y') and (decision != 'n'):
		decision = input(prompt)
	return decision


"""
Given a set of arguments,
parses them and returns the
found word
"""
def parse_unary_args(args):
	if type(args) == str:
		return args.strip()
	if len(args) == 1:
		return args[0].strip()
	word = ''
	for arg in args:
		word += arg + ' '
	return word.strip()


"""
Given a set of arguments, parses
the words to the left and right of
the '/'
"""
def parse_binary_args(args):
	if len(args) == 1 or not '/' in args:
		print('You haven\'t entered enough information. Please try again.')
		return
	old_name = ''
	new_name = ''
	counter = 0
	while (not counter >= len(args)) and (not args[counter] == '/'):
		old_name += args[counter] + ' '
		counter += 1 		
	old_name = old_name.strip()
	counter += 1
	while not counter == len(args):
		new_name += args[counter] + ' '
		counter += 1 		
	new_name = new_name.strip()
	if len(new_name) == 0:
		print('You haven\'t entered enough information. Please try again.')
		return	
	return (old_name, new_name)


"""
Given a dot_name, a filename, and the file_list,
makes a new note with that name and
adds the name to file_list
"""
def make_note(dot_name, filename):
	if path.isfile(dot_name):
		print('A note with this name already exists. Please choose a different name, delete the other note, or rename the other note.')
		return
	else:
		open(dot_name, 'w+').close()
		return 1


# MEMORY METHODS
"""
Given a memory and the name of a 
note, appends the memory to the
end of the note
"""
def append_memory(memory, note):
	with open(note, 'a') as f:
		memory += '\n'
		f.write(memory)


"""
Given the current_note and a row number,
removes the memory at that row and returns
its value
"""
def change_memory(current_note, row):
	memories = check_row(current_note, row)	
	if memories == None:
		return
	row = int(row)
	memory_to_remove = memories[row - 1].strip('\n')
	del memories[row - 1]
	write_to_note(current_note, memories)
	return memory_to_remove


"""
Given the name of a note and
a row number, moves the memory
at that row number in the current
note to the given note
"""
def move_memory(current_note, row, args):
	note = parse_unary_args(args)
	note_path = path.expanduser('~/.quicknote/.notes/.' + note)
	if not path.isfile(note_path):
		print('The note you are trying to add to does not exist. Please try again.')	
		return
	memory_to_move = change_memory(current_note, row)	
	if memory_to_move == None:
		return
	append_memory(memory_to_move, note_path)
	print('Moved \'' + memory_to_move + '\' to \'' + note + '\'')
		

"""
Given the name of a note and
a row number, copies the memory
at that row number in the current
note to the given note
"""
def copy_memory(current_note, row, args):
	note = parse_unary_args(args)
	note_path = path.expanduser('~/.quicknote/.notes/.' + note)
	if not path.isfile(note_path):
		print('The note you are trying to add to does not exist. Please try again.')
		return
	memories = check_row(current_note, row)	
	if memories == None:
		return
	row = int(row)
	memory_to_copy = memories[row - 1].strip('\n')
	append_memory(memory_to_copy, note_path)
	print('Copied \'' + memory_to_copy + '\' to \'' + note + '\'')


"""
Given a note and a row number,
removes the memory at that row number
"""
def remove_memory(note, row):
	if not path.isfile(note):
		return
	memory_to_remove = change_memory(note, row)	
	if memory_to_remove == None:
		return
	print('Removed memory \'' + memory_to_remove + '\'')


"""
Given a filename, removes all
memories from that file
"""
def clear_memories(filename):
	prompt = 'Are you sure you want to clear your current memories on this note?' + BOLD + ' There is no going back (y/n): ' + RESET
	decision = request_user_permission(prompt)
	if decision == 'y':
		open(filename, 'w').close()
		print('Memories cleared')
	elif decision == 'n': # this probably isn't necessary (i.e. don't need to check, could be an else)
		print('Memory clearing aborted')	


"""
Given a filename and a list of words,
adds those words (as a single line) to
the end of the file
"""
def add_memory(note, args):
	memory = parse_unary_args(args)
	append_memory(memory, note)
	print('Remembered \'' + memory + '\'')


"""
Given a the name of a note, lists the current memories
held by that note 
"""
def list_memories(note_path, note_name):
	if not path.isfile(note_path):
		print('Hmmm. The current note doesn\'t seem to be working. Please try again later.')
		print('If the current note continues to fail to open, please submit a help ticket by emailing us at quicknote.v1@gmail.com')
		return
	if path.getsize(note_path) == 0:
		print('You have no memories on this note')
		return
	num_memories = sum(1 for memory in open(note_path, 'r'))
	with open(note_path, 'r') as to_read:
		counter = 1
		print(BOLD + ITALIC + 'Found ' + str(num_memories) + ' memories on \'' + note_name + '\'' + RESET)
		for memory in to_read:
			memory = BOLD + str(counter) + '. ' + RESET + memory.strip('\n') 
			print(memory)
			counter += 1


"""
Given a row number, removes the
memory at that row and adds it to
the '.archive' memory file
"""
def archive_memory(filename, row):
	archive_note = path.expanduser('~/.quicknote/.notes/.archive')
	memories = check_row(filename, row)
	if memories == None:
		return
	row = int(row)
	memory_to_archive = memories[row - 1]
	del memories[row - 1]
	with open(filename, 'w') as f:
		for memory in memories:
			f.write(memory)
	with open(archive_note, 'a') as f:
		f.write(memory_to_archive)
	print('Archived memory \'' + memory_to_archive.strip('\n') + '\'')


# NOTE METHODS
"""
Given the name of a note
and a list of memories, 
adds all the memories to the
note
"""
def write_to_note(note, memories):
	with open(note, 'w') as to_write:
		for memory in memories:
			to_write.write(memory)


"""
Given the name of a note,
duplicates that note and names
the new note the desired name
"""
def duplicate_note(args):
	pair = parse_binary_args(args)
	if pair == None:
		return
	existing_note = pair[0]
	new_note = pair[1]
	existing_path = path.expanduser('~/.quicknote/.notes/.' + existing_note)
	new_path = path.expanduser('~/.quicknote/.notes/.' + new_note)
	# confirm that a note actually exists with the given name
	if not path.isfile(existing_path):
		print('There is no note with name \'' + existing_note + '\'. Please try again.')
		return
	new_note_exists = make_note(new_path, new_note)	
	if new_note_exists != None: 
		shutil.copyfile(existing_path, new_path)
		print('Successfully duplicated \'' + existing_note + '\' as \'' + new_note + '\'')
	else:		
		print('Could not duplicate \'' + existing_note + '\'. Please try again.')


"""
Given the name of a .txt file,
makes a copy of that file as a .file
to be used as a new note
"""
def import_note(args):
	pair = parse_binary_args(args)
	if pair == None:
		return
	import_name = pair[0]
	note_name = pair[1]
	# confirm that imported file is a '.txt'; return otherwise
	if import_name[-4:] != '.txt':
		print(BOLD + 'Quick Note' + RESET + ' only allows for the importation of \'.txt\' files as notes. Please try again.')
		return
	new_note = path.expanduser('~/.quicknote/.notes/.' + note_name)
	new_note_exists = make_note(new_note, note_name)	
	if new_note_exists != None: 
		shutil.copyfile(import_name, new_note)
		print('Successfully imported \'' + import_name + '\' as \'' + note_name + '\'')
	else:		
		print('Could not import \'' + import_name + '\'. Please try again.')


"""
Given the name of a note, makes a 
copy of the note which is then exported
to the user's working directory
"""
def export_note(args):
	pair = parse_binary_args(args)
	if pair == None:
		return
	note_name = pair[0]
	filename = pair[1] + '.txt'
	note_path = path.expanduser('~/.quicknote/.notes/.' + note_name)
	# confirm that a note actually exists with the given name
	if not path.isfile(note_path):
		print('There is no note with name \'' + note_name + '\'. Please try again.')
		return
	# confirm that there is not an existing '.txt' file in the working directory with the same name
	if path.isfile(filename):
		print('A file with this name already exists in your working directory. Please pick a different name.')
	else:
		open(filename, 'w+')
		shutil.copyfile(note_path, filename)
		print('Created a new file called \'' + filename + '\' in your working directory')


"""
Given the name of a note, moves the note
rom the .notes directory and add it to the
.archive_notes directory 
"""
def archive_note(args, current_note, data_file):
	note_to_archive = parse_unary_args(args)
	note_path = path.expanduser('~/.quicknote/.notes/.' + note_to_archive)
	
	if not path.isfile(note_path):
		print('The note you are trying to archive does not exist. Please try again.')	
		return
	# prevent the user from archiving 'archive' or 'default'
	if note_to_archive == 'archive' or note_to_archive == 'default':
		print('\'archive\' and \'default\' may not be archived. Please try again.')
		return
	new_path = path.expanduser('~/.quicknote/.archive_notes/.' + note_to_archive)
	if path.isfile(new_path):
		print('You already have an archived note named \'' + note_to_archive + '\'. Please try again. (hint: rename something)')
		return
	os.rename(note_path, new_path) 
	print('Archived \'' + note_to_archive + '\'')
	if current_note != 'default':
				write_to_data_file(data_file, path.expanduser('~/.quicknote/.notes/.default'))


"""
Given the name of a note, moves the note
from the .archive_notes directory to the
.notes directory.
"""
def un_archive_note(args):
	note_to_un_archive = parse_unary_args(args)
	note_path = path.expanduser('~/.quicknote/.archive_notes/.' + note_to_un_archive)
	
	if not path.isfile(note_path):
		print('The note you are trying to un-archive does not exist. Please try again.')	
		return
	new_path = path.expanduser('~/.quicknote/.notes/.' + note_to_un_archive)
	if path.isfile(new_path):
		print('You already have a note named \'' + note_to_un_archive + '\'. Please try again. (hint: rename something)')
		return
	os.rename(note_path, new_path) 
	print('Un-archived \'' + note_to_un_archive + '\'')


"""
Given a filename, adds a dot file with
the given name, which will then be set 
as the default file for memories
"""
def add_note(args, current_note, data_file):
	note_name = parse_unary_args(args) 
	dot_name = path.expanduser('~/.quicknote/.notes/.' + note_name)
	return_value = make_note(dot_name, note_name)
	if return_value == None:
		return
	change_note(note_name, current_note, data_file) 
	print('Added new note \'' + note_name + '\'')


"""
Prints the list of current notes
"""
def list_notes(notes):
	counter = 1
	if len(notes) == 0:
		print('You have no notes at the moment. Start by adding a new note or by importing one from a \'.txt.\' file.')
		return
	print(BOLD + ITALIC + 'Found ' + str(len(notes)) + ' notes' + RESET)
	for note in notes:
		note = BOLD + str(counter) + '. ' + RESET + note
		print(note)	
		counter += 1


"""
Prints the list of archived notes  
"""
def list_archive_notes(archive_notes): # this is a complete copy of list_notes, so maybe just delete and use list_notes
	counter = 1
	if len(archive_notes) == 0:
		print('You have no archived notes at the moment.')
		return
	print(BOLD + ITALIC + 'Found ' + str(len(archive_notes)) + ' archived note(s)' + RESET)
	for note in archive_notes:
		note = BOLD + str(counter) + '. ' + RESET + note
		print(note)	
		counter += 1


"""
Given a filename, removes a file with that name
if it exists
"""
def remove_note(args, current_note, data_file):
	note_to_remove = parse_unary_args(args)
	if note_to_remove.lower() == 'archive' or note_to_remove.lower() == 'default':
		print('Sorry. The \'default\' and \'archive\' notes cannot be removed. However, they can be cleared of their contents.')
		return
	prompt = 'Are you sure you want to remove \'' + note_to_remove + '\'?' + BOLD + ' There is no going back (y/n): ' + RESET
	decision = request_user_permission(prompt)
	if decision == 'n':
		print('Note removal aborted')
	elif decision == 'y': # this probably isn't necessary (i.e. don't need to check, could be an else)
		note_path_to_remove = path.expanduser('~/.quicknote/.notes/.' + note_to_remove)
		if path.isfile(note_path_to_remove):
			os.remove(note_path_to_remove)
			if current_note == note_to_remove:
				write_to_data_file(data_file, path.expanduser('~/.quicknote/.notes/.default'))
			print('Removed note \'' + note_to_remove + '\'')
		else:
			print('The note you are trying to remove does not exist. Please try again.')


"""
Clears all available notes besides 'archive' and 'default'
"""
def clear_notes(notes, current_note, data_file):
	prompt = 'Are you sure you want to clear all of your notes?' + BOLD + ' There is no going back (y/n): ' + RESET
	decision = request_user_permission(prompt)
	if decision == 'n':
		print('Clearing of notes aborted')
	elif decision == 'y':
		for note in notes:
			note_path = path.expanduser('~/.quicknote/.notes/.' + note)
			if path.isfile(note_path) and (note != 'archive' and note != 'default'):
				os.remove(note_path)
		if current_note != 'default':
			write_to_data_file(data_file, path.expanduser('~/.quicknote/.notes/.default'))
		print('Cleared all user notes from Quick Note cache')


"""
Clears all archived notes
"""
def clear_archive_notes(archive_notes):
	prompt = 'Are you sure you want to clear all of your archived notes?' + BOLD + ' There is no going back (y/n): ' + RESET
	decision = request_user_permission(prompt)
	if decision == 'n':
		print('Clearing of archived notes aborted')
	elif decision == 'y':
		for note in archive_notes:
			note_path = path.expanduser('~/.quicknote/.archive_notes/.' + note)
			if path.isfile(note_path):
				os.remove(note_path)
		print('Cleared all archived user notes from Quick Note cache')


"""
Returns the name of the current working note
"""
def get_current_note(data_file):
	with open(data_file, 'r') as read_from:
		data = json.load(read_from)
		return data['current_note'] 


"""
Given the user and a filename, changes the current note to 
the filename
"""
def change_note(args, current_note, data_file):
	filename = '~/.quicknote/.notes/.'
	note_name = parse_unary_args(args)
	filename += note_name
	filename = path.expanduser(filename)
	# stop if the note to be changed to is the current note	
	if current_note == filename:
		print('The note you are trying to change to is already the current note.')
		return

	if not path.isfile(filename):
		print('Hmmm. The note you entered doesn\'t seem to exist. Please try again.')
		return
	
	write_to_data_file(data_file, filename)


"""
Given a filename, renames the file
"""
def rename_note(args, current_note, data_file):
	prefix = '~/.quicknote/.notes/.'
	pair = parse_binary_args(args)
	if pair == None:
		return
	old_name = pair[0]
	new_name = pair[1]
	old_path = path.expanduser(prefix + old_name)
	new_path = path.expanduser(prefix + new_name)
	# confirm that the note to change actually exists
	if not path.isfile(old_path):
		print('The note you are trying to rename does not exist. Please try again.')
		return
	# prevent the user from renaming 'archive' or 'default'
	if old_name == 'archive' or old_name == 'default':
		print('\'archive\' and \'default\' are reserved names. Please try again.')
		return
	os.rename(old_path, new_path)
	counter = 0
	if old_path == current_note:
		write_to_data_file(data_file, new_path)
	print('Renamed \'' + old_name + '\' to \'' + new_name + '\'')	


# MAIN METHODS
"""
Returns access to the .quicknote_cache file, the .archive_notes and .notes directories
"""
def background_info():
	files = []
	# this file holds any miscellaneous information that Quick Note needs –– at the moment, just the current file
	data_file = path.expanduser('~/.quicknote/.background/data_file.json')
	# this directory holds available notes
	notes = path.expanduser('~/.quicknote/.notes')
	# this holds the name of the current note, as taken from data_file
	current_note = get_current_note(data_file)
	# this directory holds archived notes
	archive_notes = path.expanduser('~/.quicknote/.archive_notes')
	
	files.append(data_file)
	files.append(current_note)
	files.append(read_directory(notes))
	files.append(read_directory(archive_notes))
	return files


"""
Prints the user's version of Quick Note
"""
def get_version():
	print(BOLD + 'Quick Note v.1.0.17' + RESET) 


"""
Prints some help/usage information
"""
def get_help():
	get_version()
	print('\n', end='')
	print(BOLD + 'GENERAL' + RESET + '\n')
	print('\'Notes\' are files where we store your thoughts')
	print('\'Memories\' are the individual entries in each note\n')
	print(BOLD + 'MEMORIES' + RESET + '\n')
	print(BOLD + ITALIC + 'your_memory' + RESET + ' --> for ' + BOLD + 'adding ' + RESET + 'a memory')
	print('     Usage: \'qnote Hello World!\'')
	print(BOLD + '-l' + RESET + ' --> for ' + BOLD + 'listing ' + RESET + 'memories on the current note')
	print('     Usage: \'qnote -l\'')
	print(BOLD + '-cl' + RESET + ' --> for ' + BOLD + 'clearing ' + RESET + 'memories on the current note')
	print('     Usage: \'qnote -cl\'')
	print(BOLD + '-rm ' + ITALIC + 'row_number'  + RESET + ' --> for ' + BOLD + 'removing ' + RESET + 'the memory at that row number in the current note (row number can be retrieved from \'' + BOLD + 'qnote -l' + RESET + '\')')
	print('     Usage: \'qnote -rm 3\'')
	print(BOLD + '-m ' + ITALIC + 'row_number other_note_name'  + RESET + ' --> for ' + BOLD + 'moving ' + RESET + 'the memory at that row number in the current note to another note')
	print('     Usage: \'qnote -m 3 shopping list\'')
	print(BOLD + '-c ' + ITALIC + 'row_number other_note_name'  + RESET + ' --> for ' + BOLD + 'copying ' + RESET + 'the memory at that row number in the current note to another note')
	print('     Usage: \'qnote -c 3 shopping list\'\n')
	print(BOLD + 'NOTES' + RESET + '\n')
	print(BOLD + '-an ' + ITALIC + 'note_name'  + RESET + ' --> for ' + BOLD + 'adding ' + RESET + 'a new note with the given name')
	print('     Usage: \'qnote -an shopping list\'')
	print(BOLD + '-ln' + RESET + ' --> for ' + BOLD + 'listing ' + RESET + 'current notes')
	print('     Usage: \'qnote -ln\'')
	print(BOLD + '-cn' + RESET + ' --> for ' + BOLD + 'viewing ' + RESET + 'the name of the current note')
	print('     Usage: \'qnote -cn\'')
	print(BOLD + '-chn ' + ITALIC + 'note_name'  + RESET + ' --> for ' + BOLD + 'changing ' + RESET + 'to the note with the given name')
	print('     Usage: \'qnote -chn To Do\'')
	print(BOLD + '-rnn ' + ITALIC + 'note_name' + RESET + BOLD + ' / ' + ITALIC + 'new_name' + RESET + ' --> for ' + BOLD + 'renaming ' + RESET + 'the given note')
	print('     Usage: \'qnote -rnn To Do / Done\'')
	print(BOLD + '-rmn ' + ITALIC + 'note_name'  + RESET + ' --> for ' + BOLD + 'removing ' + RESET + 'the note with the given name')
	print('     Usage: \'qnote -rmn To Do\'')
	print(BOLD + '-rmn ' + RESET + ' --> for ' + BOLD + 'removing ' + RESET + 'the current note')
	print('     Usage: \'qnote -rmn\'')
	print(BOLD + '-cln' + RESET + ' --> for ' + BOLD + 'clearing ' + RESET + 'your current notes')
	print('     Usage: \'qnote -cln\'')
	print(BOLD + '-dn' + ITALIC + ' note_to_duplicate' + RESET + BOLD + ' / ' + ITALIC + 'new_note_name' + RESET + ' --> for ' + BOLD + 'duplicating ' + RESET + 'existing notes')
	print('     Usage: \'qnote -dn random / general\'')
	print(BOLD + '-in ' + ITALIC + 'file_to_import' + RESET + BOLD + ' / ' + ITALIC + 'note_name' + RESET + ' --> for ' + BOLD + 'importing ' + RESET + '\'.txt\' files as notes')
	print('     Usage: \'qnote -in random.txt / Assorted Tasks\'')
	print(BOLD + '-en ' + ITALIC + 'note_to_export' + RESET + BOLD + ' / ' + ITALIC + 'new_file_name' + RESET + ' --> for ' + BOLD + 'exporting ' + RESET + 'notes as \'.txt\' files')
	print('     Usage: \'qnote -en Assorted Tasks / nextweek\'\n')
	print(BOLD + 'ARCHIVE' + RESET)
	print(ITALIC + 'Archived notes do not receive the same functionality as regular notes. To rename, remove, export, etc. archived notes, please unarchive them first.' + RESET + '\n')
	print(BOLD + '-a ' + ITALIC + 'row_number'  + RESET + ' --> for ' + BOLD + 'archiving ' + RESET + 'the memory at that row number in the current note (row number can be retrieved from \'' + BOLD + 'qnote -l' + RESET + '\')')
	print('     Usage: \'qnote -a 3\'')
	print(BOLD + '-arn ' + ITALIC + 'note_name'  + RESET + ' --> for ' + BOLD + 'archiving ' + RESET + 'the note with the given name')
	print('     Usage: \'qnote -an To Do\'')
	print(BOLD + '-arn ' + RESET + ' --> for ' + BOLD + 'archiving ' + RESET + 'the current note')
	print('     Usage: \'qnote -an\'')
	print(BOLD + '-unan ' + ITALIC + 'note_name'  + RESET + ' --> for ' + BOLD + 'unarchiving ' + RESET + 'the note with the given name')
	print('     Usage: \'qnote -unan To Do\'')
	print(BOLD + '-lan' + RESET + ' --> for ' + BOLD + 'listing ' + RESET + 'archived notes')
	print('     Usage: \'qnote -lan\'')
	print(BOLD + '-clan' + RESET + ' --> for ' + BOLD + 'clearing ' + RESET + 'your archived notes')
	print('     Usage: \'qnote -clan\'')


"""
Prints some random info about Quick Note
"""
def info():
	print(BOLD + 'Quick Note' + RESET + ' is an open-source note-taking software designed for personal use.')
	print('If you need help, type \'qnote -help\'')
	print('To view your version of ' + BOLD + 'Quick Note' + RESET + ', type \'qnote -version\'\n')
	print(BOLD + 'Quick Note' + RESET + ' uses the GNU General Public License v3, so you can edit, distribute, and otherwise meddle with any of the source code.')
	print('The only thing you can\'t do is take this software and make it closed-source and try to sell it. ' + BOLD + 'Quick Note' + RESET + ' was designed to be free for everyone, forever.')


"""
Handles command line arguments and redirects to appropriate
helper functions. Should be further decomposed
"""
def main():
	# confirm that necessary .quicknote folder exists
	quicknote = path.expanduser('~/.quicknote')
	if not path.isdir(quicknote):
		install()

	# send_update_message()
	args = sys.argv[1:]
	files = background_info()

	data_file = files[0]
	current_note = files[1].strip('\n')
	notes = files[2]
	archive_notes = files[3]

	last_slash_index = current_note.rfind('/')	
	current_note_name = current_note[last_slash_index + 2:] 
	
	if len(args) == 0:
		info()
		return
	command = args[0]
	if command[0] == '-':
		if len(args) == 1:
			if command == '-l':
				list_memories(current_note, current_note_name)
			elif command == '-cl':
				clear_memories(current_note)
			elif command == '-help':
				get_help()
			elif command == '-version':
				get_version()
			elif command == '-ln':
				list_notes(notes) 
			elif command == '-cn':
				print(current_note_name)
			elif command == '-cln':
				clear_notes(notes, current_note_name, data_file)
			elif command == '-clan':
				clear_archive_notes(archive_notes)
			elif command == '-rmn':
				remove_note(current_note_name, current_note_name, data_file)
			# this is for archiving the current note
			elif command == '-an':
				archive_note(current_note_name, current_note_name, data_file)
			elif command == '-lan':
				list_archive_notes(archive_notes)
			else:
				print('qnote error: command \'' + command + '\' not recognized. Please try again.')
				exit(1)
		elif len(args) >= 1:
			if command == '-rm':
				remove_memory(current_note, args[1])
			elif command == '-a':
				archive_memory(current_note, args[1])
			elif command == '-an':
				add_note(args[1:], current_note, data_file)
			elif command == '-chn':
				change_note(args[1:], current_note, data_file)			
				print('Changed current note to \'' + note_name + '\'')
			elif command == '-rnn':
				rename_note(args[1:], current_note, data_file)
			# this is for removing any note
			elif command == '-rmn':
				remove_note(args[1:], current_note_name, data_file)
			# this is for archiving any note
			elif command == '-arn':
				archive_note(args[1:], current_note_name, data_file)	
			elif command == '-unan':
				un_archive_note(args[1:])
			elif command == '-in':
				import_note(args[1:])
			elif command == '-en':
				export_note(args[1:])
			elif command == '-dn':
				duplicate_note(args[1:])
			elif command == '-m':
				move_memory(current_note, args[1], args[2:])
			elif command == '-c':
				copy_memory(current_note, args[1], args[2:])
			else:
				print('qnote error: command \'' + command + '\' not recognized. Please try again.')	
				exit(1)
	else:
		add_memory(current_note, args)

if __name__ == '__main__':
	main()	

